
import { Announcement, Language, Train, TrainStatus } from "@/types";

// Mock train data
export const TRAINS: Train[] = [
  {
    id: "1",
    trainNumber: "12345",
    trainName: "Rajdhani Express",
    source: "Delhi",
    destination: "Mumbai",
    scheduledArrival: "08:30",
    scheduledDeparture: "08:45",
    platform: "1",
    status: "ON_TIME",
  },
  {
    id: "2",
    trainNumber: "67890",
    trainName: "Shatabdi Express",
    source: "Chennai",
    destination: "Bangalore",
    scheduledArrival: "09:15",
    scheduledDeparture: "09:30",
    platform: "2",
    status: "DELAYED",
  },
  {
    id: "3",
    trainNumber: "54321",
    trainName: "Duronto Express",
    source: "Kolkata",
    destination: "Hyderabad",
    scheduledArrival: "10:00",
    scheduledDeparture: "10:15",
    platform: "3", 
    status: "ARRIVING",
  },
  {
    id: "4",
    trainNumber: "98765",
    trainName: "Garib Rath",
    source: "Jaipur",
    destination: "Pune",
    scheduledArrival: "11:45",
    scheduledDeparture: "12:00",
    platform: "4",
    status: "PLATFORM_CHANGED",
  },
  {
    id: "5",
    trainNumber: "13579",
    trainName: "Sampark Kranti",
    source: "Ahmedabad",
    destination: "Goa",
    scheduledArrival: "13:30",
    scheduledDeparture: "13:45",
    platform: "5",
    status: "CANCELLED",
  },
];

// Mock announcements data
export const ANNOUNCEMENTS: Announcement[] = [
  {
    id: "1",
    trainId: "1",
    messageType: "ARRIVAL",
    platform: "1",
    status: "ARRIVING",
    message: {
      english: "Attention passengers, Rajdhani Express from Delhi to Mumbai is arriving on platform 1.",
      hindi: "‡§Ø‡§æ‡§§‡•ç‡§∞‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§∏‡•Ç‡§ö‡§ø‡§§ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à, ‡§∞‡§æ‡§ú‡§ß‡§æ‡§®‡•Ä ‡§è‡§ï‡•ç‡§∏‡§™‡•ç‡§∞‡•á‡§∏ ‡§¶‡§ø‡§≤‡•ç‡§≤‡•Ä ‡§∏‡•á ‡§Æ‡•Å‡§Ç‡§¨‡§à ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡•ç‡§≤‡•á‡§ü‡§´‡•â‡§∞‡•ç‡§Æ 1 ‡§™‡§∞ ‡§Ü ‡§∞‡§π‡•Ä ‡§π‡•à‡•§",
      telugu: "‡∞™‡±ç‡∞∞‡∞Ø‡∞æ‡∞£‡∞ø‡∞ï‡±Å‡∞≤‡∞ï‡±Å ‡∞ó‡∞Æ‡∞®‡∞ø‡∞ï, ‡∞¶‡∞ø‡∞≤‡±ç‡∞≤‡±Ä ‡∞®‡±Å‡∞Ç‡∞°‡∞ø ‡∞Æ‡±Å‡∞Ç‡∞¨‡±à‡∞ï‡∞ø ‡∞µ‡±Ü‡∞≥‡±ç‡∞≥‡±á ‡∞∞‡∞æ‡∞ú‡∞ß‡∞æ‡∞®‡∞ø ‡∞é‡∞ï‡±ç‡∞∏‡±ç‚Äå‡∞™‡±ç‡∞∞‡±Ü‡∞∏‡±ç ‡∞™‡±ç‡∞≤‡∞æ‡∞ü‡±ç‚Äå‡∞´‡∞æ‡∞∞‡∞Ç 1‡∞™‡±à ‡∞∞‡∞æ‡∞¨‡±ã‡∞§‡±ã‡∞Ç‡∞¶‡∞ø.",
    },
    timestamp: new Date().toISOString(),
  },
  {
    id: "2",
    trainId: "2",
    messageType: "DELAY",
    platform: "2",
    status: "DELAYED",
    message: {
      english: "We regret to inform that Shatabdi Express from Chennai to Bangalore is delayed by 30 minutes.",
      hindi: "‡§π‡§Æ‡•á‡§Ç ‡§Ø‡§π ‡§∏‡•Ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡§§‡•á ‡§π‡•Å‡§è ‡§ñ‡•á‡§¶ ‡§π‡•à ‡§ï‡§ø ‡§ö‡•á‡§®‡•ç‡§®‡§à ‡§∏‡•á ‡§¨‡•à‡§Ç‡§ó‡§≤‡•ã‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∂‡§§‡§æ‡§¨‡•ç‡§¶‡•Ä ‡§è‡§ï‡•ç‡§∏‡§™‡•ç‡§∞‡•á‡§∏ 30 ‡§Æ‡§ø‡§®‡§ü ‡§ï‡•Ä ‡§¶‡•á‡§∞‡•Ä ‡§∏‡•á ‡§Ü ‡§∞‡§π‡•Ä ‡§π‡•à‡•§",
      telugu: "‡∞ö‡±Ü‡∞®‡±ç‡∞®‡±à ‡∞®‡±Å‡∞Ç‡∞°‡∞ø ‡∞¨‡±Ü‡∞Ç‡∞ó‡∞≥‡±Ç‡∞∞‡±Å‡∞ï‡∞ø ‡∞µ‡±Ü‡∞≥‡±ç‡∞≥‡±á ‡∞∂‡∞§‡∞æ‡∞¨‡±ç‡∞¶‡∞ø ‡∞é‡∞ï‡±ç‡∞∏‡±ç‚Äå‡∞™‡±ç‡∞∞‡±Ü‡∞∏‡±ç 30 ‡∞®‡∞ø‡∞Æ‡∞ø‡∞∑‡∞æ‡∞≤‡±Å ‡∞Ü‡∞≤‡∞∏‡±ç‡∞Ø‡∞Ç‡∞ó‡∞æ ‡∞â‡∞Ç‡∞¶‡∞®‡∞ø ‡∞§‡±Ü‡∞≤‡∞ø‡∞Ø‡∞ú‡±á‡∞Ø‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞ö‡∞ø‡∞Ç‡∞§‡∞ø‡∞∏‡±ç‡∞§‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞Æ‡±Å.",
    },
    timestamp: new Date().toISOString(),
  },
  {
    id: "3",
    trainId: "3",
    messageType: "ARRIVAL",
    platform: "3",
    status: "ARRIVING",
    message: {
      english: "Attention passengers, Duronto Express from Kolkata to Hyderabad is arriving on platform 3.",
      hindi: "‡§Ø‡§æ‡§§‡•ç‡§∞‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§∏‡•Ç‡§ö‡§ø‡§§ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à, ‡§¶‡•Å‡§∞‡§Ç‡§§‡•ã ‡§è‡§ï‡•ç‡§∏‡§™‡•ç‡§∞‡•á‡§∏ ‡§ï‡•ã‡§≤‡§ï‡§æ‡§§‡§æ ‡§∏‡•á ‡§π‡•à‡§¶‡§∞‡§æ‡§¨‡§æ‡§¶ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡•ç‡§≤‡•á‡§ü‡§´‡•â‡§∞‡•ç‡§Æ 3 ‡§™‡§∞ ‡§Ü ‡§∞‡§π‡•Ä ‡§π‡•à‡•§",
      telugu: "‡∞™‡±ç‡∞∞‡∞Ø‡∞æ‡∞£‡∞ø‡∞ï‡±Å‡∞≤‡∞ï‡±Å ‡∞ó‡∞Æ‡∞®‡∞ø‡∞ï, ‡∞ï‡±ã‡∞≤‡±ç‡∞ï‡∞§‡∞æ ‡∞®‡±Å‡∞Ç‡∞°‡∞ø ‡∞π‡±à‡∞¶‡∞∞‡∞æ‡∞¨‡∞æ‡∞¶‡±ç‚Äå‡∞ï‡∞ø ‡∞µ‡±Ü‡∞≥‡±ç‡∞≥‡±á ‡∞¶‡±Å‡∞∞‡∞Ç‡∞§‡±ã ‡∞é‡∞ï‡±ç‡∞∏‡±ç‚Äå‡∞™‡±ç‡∞∞‡±Ü‡∞∏‡±ç ‡∞™‡±ç‡∞≤‡∞æ‡∞ü‡±ç‚Äå‡∞´‡∞æ‡∞∞‡∞Ç 3‡∞™‡±à ‡∞∞‡∞æ‡∞¨‡±ã‡∞§‡±ã‡∞Ç‡∞¶‡∞ø.",
    },
    timestamp: new Date().toISOString(),
  },
  {
    id: "4",
    trainId: "4",
    messageType: "PLATFORM_CHANGE",
    platform: "5",
    status: "PLATFORM_CHANGED",
    message: {
      english: "Attention passengers, Garib Rath from Jaipur to Pune will now arrive at platform 5 instead of platform 4.",
      hindi: "‡§Ø‡§æ‡§§‡•ç‡§∞‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§∏‡•Ç‡§ö‡§ø‡§§ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à, ‡§ó‡§∞‡•Ä‡§¨ ‡§∞‡§• ‡§ú‡§Ø‡§™‡•Å‡§∞ ‡§∏‡•á ‡§™‡•Å‡§£‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡•ç‡§≤‡•á‡§ü‡§´‡•â‡§∞‡•ç‡§Æ 4 ‡§ï‡•á ‡§¨‡§ú‡§æ‡§Ø ‡§™‡•ç‡§≤‡•á‡§ü‡§´‡•â‡§∞‡•ç‡§Æ 5 ‡§™‡§∞ ‡§Ü‡§è‡§ó‡•Ä‡•§",
      telugu: "‡∞™‡±ç‡∞∞‡∞Ø‡∞æ‡∞£‡∞ø‡∞ï‡±Å‡∞≤‡∞ï‡±Å ‡∞ó‡∞Æ‡∞®‡∞ø‡∞ï, ‡∞ú‡±à‡∞™‡±Ç‡∞∞‡±ç ‡∞®‡±Å‡∞Ç‡∞°‡∞ø ‡∞™‡±Ç‡∞£‡±á‡∞ï‡∞ø ‡∞µ‡±Ü‡∞≥‡±ç‡∞≥‡±á ‡∞ó‡∞∞‡±Ä‡∞¨‡±ç ‡∞∞‡∞•‡±ç ‡∞™‡±ç‡∞≤‡∞æ‡∞ü‡±ç‚Äå‡∞´‡∞æ‡∞∞‡∞Ç 4 ‡∞¨‡∞¶‡±Å‡∞≤‡±Å‡∞ó‡∞æ ‡∞™‡±ç‡∞≤‡∞æ‡∞ü‡±ç‚Äå‡∞´‡∞æ‡∞∞‡∞Ç 5‡∞™‡±à ‡∞µ‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.",
    },
    timestamp: new Date().toISOString(),
  },
  {
    id: "5",
    trainId: "5",
    messageType: "CANCELLATION",
    platform: "5",
    status: "CANCELLED",
    message: {
      english: "We regret to inform that Sampark Kranti from Ahmedabad to Goa has been cancelled due to technical reasons.",
      hindi: "‡§π‡§Æ‡•á‡§Ç ‡§Ø‡§π ‡§∏‡•Ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡§§‡•á ‡§π‡•Å‡§è ‡§ñ‡•á‡§¶ ‡§π‡•à ‡§ï‡§ø ‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§ï‡§æ‡§∞‡§£‡•ã‡§Ç ‡§∏‡•á ‡§Ö‡§π‡§Æ‡§¶‡§æ‡§¨‡§æ‡§¶ ‡§∏‡•á ‡§ó‡•ã‡§µ‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡•ç‡§∞‡§æ‡§Ç‡§§‡§ø ‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞ ‡§¶‡•Ä ‡§ó‡§à ‡§π‡•à‡•§",
      telugu: "‡∞∏‡∞æ‡∞Ç‡∞ï‡±á‡∞§‡∞ø‡∞ï ‡∞ï‡∞æ‡∞∞‡∞£‡∞æ‡∞≤ ‡∞µ‡∞≤‡±ç‡∞≤ ‡∞Ö‡∞π‡±ç‡∞Æ‡∞¶‡∞æ‡∞¨‡∞æ‡∞¶‡±ç ‡∞®‡±Å‡∞Ç‡∞°‡∞ø ‡∞ó‡±ã‡∞µ‡∞æ‡∞ï‡±Å ‡∞µ‡±Ü‡∞≥‡±ç‡∞≥‡±á ‡∞∏‡∞Ç‡∞™‡∞∞‡±ç‡∞ï‡±ç ‡∞ï‡±ç‡∞∞‡∞æ‡∞Ç‡∞§‡∞ø ‡∞∞‡∞¶‡±ç‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞®‡∞ø ‡∞§‡±Ü‡∞≤‡∞ø‡∞Ø‡∞ú‡±á‡∞Ø‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞ö‡∞ø‡∞Ç‡∞§‡∞ø‡∞∏‡±ç‡∞§‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞Æ‡±Å.",
    },
    timestamp: new Date().toISOString(),
  },
];

// Mock data service
export const dataService = {
  getTrains: async (): Promise<Train[]> => {
    // Simulate API call delay
    await new Promise(resolve => setTimeout(resolve, 500));
    return [...TRAINS];
  },
  
  getTrainById: async (id: string): Promise<Train | undefined> => {
    // Simulate API call delay
    await new Promise(resolve => setTimeout(resolve, 300));
    return TRAINS.find(train => train.id === id);
  },
  
  updateTrain: async (train: Train): Promise<Train> => {
    // Simulate API call delay
    await new Promise(resolve => setTimeout(resolve, 700));
    
    // Find and update the train in our mock data
    const index = TRAINS.findIndex(t => t.id === train.id);
    
    if (index === -1) {
      throw new Error("Train not found");
    }
    
    TRAINS[index] = train;
    return train;
  },
  
  createTrain: async (train: Omit<Train, "id">): Promise<Train> => {
    // Simulate API call delay
    await new Promise(resolve => setTimeout(resolve, 800));
    
    // Create a new train with ID
    const newTrain: Train = {
      ...train,
      id: String(TRAINS.length + 1),
    };
    
    // Add to mock data
    TRAINS.push(newTrain);
    return newTrain;
  },
  
  getAnnouncements: async (): Promise<Announcement[]> => {
    // Simulate API call delay
    await new Promise(resolve => setTimeout(resolve, 600));
    
    // Return the announcements with train data
    return ANNOUNCEMENTS.map(announcement => {
      const train = TRAINS.find(train => train.id === announcement.trainId);
      return {
        ...announcement,
        train,
      };
    });
  },
  
  createAnnouncement: async (announcement: Omit<Announcement, "id" | "timestamp">): Promise<Announcement> => {
    // Simulate API call delay
    await new Promise(resolve => setTimeout(resolve, 900));
    
    // Create a new announcement with ID and timestamp
    const newAnnouncement: Announcement = {
      ...announcement,
      id: String(ANNOUNCEMENTS.length + 1),
      timestamp: new Date().toISOString(),
    };
    
    // Add to mock data
    ANNOUNCEMENTS.push(newAnnouncement);
    return newAnnouncement;
  },

  getStatusColor: (status: TrainStatus): string => {
    switch (status) {
      case "ON_TIME":
        return "bg-green-500";
      case "ARRIVING":
      case "ARRIVED":
      case "DEPARTING":
      case "DEPARTED":
        return "bg-blue-500";
      case "DELAYED":
        return "bg-yellow-500";
      case "PLATFORM_CHANGED":
        return "bg-purple-500";
      case "CANCELLED":
        return "bg-red-500";
      default:
        return "bg-gray-500";
    }
  },

  getStatusText: (status: TrainStatus): string => {
    switch (status) {
      case "ON_TIME":
        return "On Time";
      case "ARRIVING":
        return "Arriving";
      case "ARRIVED":
        return "Arrived";
      case "DEPARTING":
        return "Departing";
      case "DEPARTED":
        return "Departed";
      case "DELAYED":
        return "Delayed";
      case "PLATFORM_CHANGED":
        return "Platform Changed";
      case "CANCELLED":
        return "Cancelled";
      default:
        return "Unknown";
    }
  },

  getLanguageName: (language: Language): string => {
    switch (language) {
      case "english":
        return "English";
      case "hindi":
        return "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä";
      case "telugu":
        return "‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å";
      default:
        return "Unknown";
    }
  },
  
  getLanguageFlag: (language: Language): string => {
    switch (language) {
      case "english":
        return "üá¨üáß";
      case "hindi":
        return "üáÆüá≥";
      case "telugu":
        return "üáÆüá≥";
      default:
        return "üèÅ";
    }
  },
};
